/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TierlistImport } from './routes/tierlist'
import { Route as CharacterRouteImport } from './routes/character/route'
import { Route as IndexImport } from './routes/index'
import { Route as PalaceIndexImport } from './routes/palace/index'
import { Route as CharacterIndexImport } from './routes/character/index'
import { Route as CharacterCharacterIdImport } from './routes/character/$characterId'

// Create/Update Routes

const TierlistRoute = TierlistImport.update({
  id: '/tierlist',
  path: '/tierlist',
  getParentRoute: () => rootRoute,
} as any)

const CharacterRouteRoute = CharacterRouteImport.update({
  id: '/character',
  path: '/character',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PalaceIndexRoute = PalaceIndexImport.update({
  id: '/palace/',
  path: '/palace/',
  getParentRoute: () => rootRoute,
} as any)

const CharacterIndexRoute = CharacterIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => CharacterRouteRoute,
} as any)

const CharacterCharacterIdRoute = CharacterCharacterIdImport.update({
  id: '/$characterId',
  path: '/$characterId',
  getParentRoute: () => CharacterRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/solid-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/character': {
      id: '/character'
      path: '/character'
      fullPath: '/character'
      preLoaderRoute: typeof CharacterRouteImport
      parentRoute: typeof rootRoute
    }
    '/tierlist': {
      id: '/tierlist'
      path: '/tierlist'
      fullPath: '/tierlist'
      preLoaderRoute: typeof TierlistImport
      parentRoute: typeof rootRoute
    }
    '/character/$characterId': {
      id: '/character/$characterId'
      path: '/$characterId'
      fullPath: '/character/$characterId'
      preLoaderRoute: typeof CharacterCharacterIdImport
      parentRoute: typeof CharacterRouteImport
    }
    '/character/': {
      id: '/character/'
      path: '/'
      fullPath: '/character/'
      preLoaderRoute: typeof CharacterIndexImport
      parentRoute: typeof CharacterRouteImport
    }
    '/palace/': {
      id: '/palace/'
      path: '/palace'
      fullPath: '/palace'
      preLoaderRoute: typeof PalaceIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface CharacterRouteRouteChildren {
  CharacterCharacterIdRoute: typeof CharacterCharacterIdRoute
  CharacterIndexRoute: typeof CharacterIndexRoute
}

const CharacterRouteRouteChildren: CharacterRouteRouteChildren = {
  CharacterCharacterIdRoute: CharacterCharacterIdRoute,
  CharacterIndexRoute: CharacterIndexRoute,
}

const CharacterRouteRouteWithChildren = CharacterRouteRoute._addFileChildren(
  CharacterRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/character': typeof CharacterRouteRouteWithChildren
  '/tierlist': typeof TierlistRoute
  '/character/$characterId': typeof CharacterCharacterIdRoute
  '/character/': typeof CharacterIndexRoute
  '/palace': typeof PalaceIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/tierlist': typeof TierlistRoute
  '/character/$characterId': typeof CharacterCharacterIdRoute
  '/character': typeof CharacterIndexRoute
  '/palace': typeof PalaceIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/character': typeof CharacterRouteRouteWithChildren
  '/tierlist': typeof TierlistRoute
  '/character/$characterId': typeof CharacterCharacterIdRoute
  '/character/': typeof CharacterIndexRoute
  '/palace/': typeof PalaceIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/character'
    | '/tierlist'
    | '/character/$characterId'
    | '/character/'
    | '/palace'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/tierlist' | '/character/$characterId' | '/character' | '/palace'
  id:
    | '__root__'
    | '/'
    | '/character'
    | '/tierlist'
    | '/character/$characterId'
    | '/character/'
    | '/palace/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CharacterRouteRoute: typeof CharacterRouteRouteWithChildren
  TierlistRoute: typeof TierlistRoute
  PalaceIndexRoute: typeof PalaceIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CharacterRouteRoute: CharacterRouteRouteWithChildren,
  TierlistRoute: TierlistRoute,
  PalaceIndexRoute: PalaceIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/character",
        "/tierlist",
        "/palace/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/character": {
      "filePath": "character/route.tsx",
      "children": [
        "/character/$characterId",
        "/character/"
      ]
    },
    "/tierlist": {
      "filePath": "tierlist.tsx"
    },
    "/character/$characterId": {
      "filePath": "character/$characterId.tsx",
      "parent": "/character"
    },
    "/character/": {
      "filePath": "character/index.tsx",
      "parent": "/character"
    },
    "/palace/": {
      "filePath": "palace/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */

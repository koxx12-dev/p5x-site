/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TierlistRouteImport } from './routes/tierlist'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as CharacterRouteRouteImport } from './routes/character/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PalaceIndexRouteImport } from './routes/palace/index'
import { Route as GuideIndexRouteImport } from './routes/guide/index'
import { Route as CharacterIndexRouteImport } from './routes/character/index'
import { Route as CharacterCharacterIdRouteImport } from './routes/character/$characterId'

const TierlistRoute = TierlistRouteImport.update({
  id: '/tierlist',
  path: '/tierlist',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const CharacterRouteRoute = CharacterRouteRouteImport.update({
  id: '/character',
  path: '/character',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PalaceIndexRoute = PalaceIndexRouteImport.update({
  id: '/palace/',
  path: '/palace/',
  getParentRoute: () => rootRouteImport,
} as any)
const GuideIndexRoute = GuideIndexRouteImport.update({
  id: '/guide/',
  path: '/guide/',
  getParentRoute: () => rootRouteImport,
} as any)
const CharacterIndexRoute = CharacterIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => CharacterRouteRoute,
} as any)
const CharacterCharacterIdRoute = CharacterCharacterIdRouteImport.update({
  id: '/$characterId',
  path: '/$characterId',
  getParentRoute: () => CharacterRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/character': typeof CharacterRouteRouteWithChildren
  '/settings': typeof SettingsRoute
  '/tierlist': typeof TierlistRoute
  '/character/$characterId': typeof CharacterCharacterIdRoute
  '/character/': typeof CharacterIndexRoute
  '/guide': typeof GuideIndexRoute
  '/palace': typeof PalaceIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/settings': typeof SettingsRoute
  '/tierlist': typeof TierlistRoute
  '/character/$characterId': typeof CharacterCharacterIdRoute
  '/character': typeof CharacterIndexRoute
  '/guide': typeof GuideIndexRoute
  '/palace': typeof PalaceIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/character': typeof CharacterRouteRouteWithChildren
  '/settings': typeof SettingsRoute
  '/tierlist': typeof TierlistRoute
  '/character/$characterId': typeof CharacterCharacterIdRoute
  '/character/': typeof CharacterIndexRoute
  '/guide/': typeof GuideIndexRoute
  '/palace/': typeof PalaceIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/character'
    | '/settings'
    | '/tierlist'
    | '/character/$characterId'
    | '/character/'
    | '/guide'
    | '/palace'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/settings'
    | '/tierlist'
    | '/character/$characterId'
    | '/character'
    | '/guide'
    | '/palace'
  id:
    | '__root__'
    | '/'
    | '/character'
    | '/settings'
    | '/tierlist'
    | '/character/$characterId'
    | '/character/'
    | '/guide/'
    | '/palace/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CharacterRouteRoute: typeof CharacterRouteRouteWithChildren
  SettingsRoute: typeof SettingsRoute
  TierlistRoute: typeof TierlistRoute
  GuideIndexRoute: typeof GuideIndexRoute
  PalaceIndexRoute: typeof PalaceIndexRoute
}

declare module '@tanstack/solid-router' {
  interface FileRoutesByPath {
    '/tierlist': {
      id: '/tierlist'
      path: '/tierlist'
      fullPath: '/tierlist'
      preLoaderRoute: typeof TierlistRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/character': {
      id: '/character'
      path: '/character'
      fullPath: '/character'
      preLoaderRoute: typeof CharacterRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/palace/': {
      id: '/palace/'
      path: '/palace'
      fullPath: '/palace'
      preLoaderRoute: typeof PalaceIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/guide/': {
      id: '/guide/'
      path: '/guide'
      fullPath: '/guide'
      preLoaderRoute: typeof GuideIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/character/': {
      id: '/character/'
      path: '/'
      fullPath: '/character/'
      preLoaderRoute: typeof CharacterIndexRouteImport
      parentRoute: typeof CharacterRouteRoute
    }
    '/character/$characterId': {
      id: '/character/$characterId'
      path: '/$characterId'
      fullPath: '/character/$characterId'
      preLoaderRoute: typeof CharacterCharacterIdRouteImport
      parentRoute: typeof CharacterRouteRoute
    }
  }
}

interface CharacterRouteRouteChildren {
  CharacterCharacterIdRoute: typeof CharacterCharacterIdRoute
  CharacterIndexRoute: typeof CharacterIndexRoute
}

const CharacterRouteRouteChildren: CharacterRouteRouteChildren = {
  CharacterCharacterIdRoute: CharacterCharacterIdRoute,
  CharacterIndexRoute: CharacterIndexRoute,
}

const CharacterRouteRouteWithChildren = CharacterRouteRoute._addFileChildren(
  CharacterRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CharacterRouteRoute: CharacterRouteRouteWithChildren,
  SettingsRoute: SettingsRoute,
  TierlistRoute: TierlistRoute,
  GuideIndexRoute: GuideIndexRoute,
  PalaceIndexRoute: PalaceIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
